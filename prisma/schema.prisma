// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  last_name String
  email String @unique
  password String
  cuil BigInt @unique
  gender Gender? 
  phone BigInt @unique
  facultyId Int 
  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student Student?
  teacher Teacher?
  administrator Administrator?

  @@map("users")
}

enum Gender {
  M
  F
}

model Student {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @unique
  legajo Int
  career_id Int
  career Career @relation(fields: [career_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  quealifications Qualification[]
  course_registrations CourseRegistration[]
  exam_registrations FinalExamRegistration[]

  @@map("students")
}

model Teacher {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @unique
  tuition BigInt
  specialty String?
  final_exam TeacherFinalExam[]
  dictation TeacherSubjectDictation[]

  @@map("teachers") 
}

model Administrator {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @unique 
  area String
  position String?

  @@map("administrators") 
}

model University {
  id Int @id @default(autoincrement())
  name String
  acronym String
  faculty Faculty[]

  @@map("universities")
}

model Faculty {
  id Int @id @default(autoincrement())
  name String
  code Int
  description String?
  street String
  email String @unique
  number Int
  phone BigInt @unique
  web String?
  users User[]
  cityId Int
  universityId Int
  educational_offers EducationalOffer[]
  class_rooms ClassRoom[]
  city City @relation(fields: [cityId], references: [id])
  university University @relation(fields: [universityId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faculties")
}

model City {
  id Int @id @default(autoincrement())
  name String
  zip_code String
  faculty Faculty[]

  @@map("cities")
}

model EducationalOffer {
  id Int @id @default(autoincrement())
  year Int
  facultyId Int
  careerId Int
  price Float
  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  career Career @relation(fields: [careerId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educational_offers")
}

model Career {
  id Int @id @default(autoincrement())
  name String
  code Int @unique
  description String
  level Level
  educational_offers EducationalOffer[]
  study_plans StudyPlan[]
  students Student[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("careers")
}

enum Level {
  Course
  Engineering
  Postgraduate
  Technicality
  Degree
  Doctorate
}

model StudyPlan {
  id Int @id @default(autoincrement())
  description String
  effective_from Int
  code Int @unique
  duration Int
  careerId Int
  career Career @relation(fields: [careerId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subject_assignments SubjectInfo[]
  correlativities Correlativity[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("study_plans")
}

model CourseRegistration {
  id Int @id @default(autoincrement())
  state CourseState
  studentId Int
  subjectId Int
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject SubjectDictation @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_registrations")
}

enum CourseState {
  Irregular
  Regular
  Aprroved
}

model FinalExamRegistration {
  id Int @id @default(autoincrement())
  qualification Int
  state ExamState
  studentId Int
  examId Int
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exam FinalExam @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("final_exam_registrations")
}

enum ExamState {
  Disapproved
  Aprroved
}

model Subject {
  id Int @id @default(autoincrement())
  name String
  code Int @unique
  description String
  dictation SubjectInfo[]
  correlativities Correlativity[] @relation("MainSubject")
  required Correlativity[] @relation("CorrelativeSubject")
  quealifications Qualification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

model SubjectInfo {
  id Int @id @default(autoincrement())
  hours Int
  type SubjectType
  subjectId Int
  study_plan_id Int
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  study_plan StudyPlan @relation(fields: [study_plan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  final_exam FinalExam[]
  dictation SubjectDictation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects_info")
}

enum SubjectType {
  HalfYearly
  Yearly
}

model Correlativity {
  id Int @id @default(autoincrement())
  course Boolean
  aprrove Boolean
  subject_id Int
  correlativitie_id Int
  study_plan_id Int
  subject Subject @relation("MainSubject", fields: [subject_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  correlativitie Subject @relation("CorrelativeSubject", fields: [correlativitie_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  study_plan StudyPlan @relation(fields: [study_plan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("correlativities")
}

model Qualification {
  id Int @id @default(autoincrement())
  value Int
  student_id Int
  subject_id Int
  student Student @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject Subject @relation(fields: [subject_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("qualifications")
}

model FinalExam {
  id Int @id @default(autoincrement())
  date DateTime
  subject_id Int
  classroom_id Int?
  subject SubjectInfo @relation(fields: [subject_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  classroom ClassRoom? @relation(fields: [classroom_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  registrations FinalExamRegistration[]
  teacher TeacherFinalExam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("final_exams")
}

model TeacherFinalExam {
  final_exam_id Int
  teacher_id Int
  final_exam FinalExam @relation(fields: [final_exam_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacher Teacher @relation(fields: [teacher_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([final_exam_id, teacher_id])
  @@map("teachers_finals_exams")
}

model SubjectDictation {
  id Int @id @default(autoincrement())
  year Int
  subject_id Int
  classroom_id Int?
  subject SubjectInfo @relation(fields: [subject_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  classroom ClassRoom? @relation(fields: [classroom_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  registrations CourseRegistration[]
  teacher TeacherSubjectDictation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects_dictations")
}

model TeacherSubjectDictation {
  teacher_id Int
  dictation_id Int
  teacher Teacher @relation(fields: [teacher_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  dictation SubjectDictation @relation(fields: [dictation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([teacher_id, dictation_id])
  @@map("teachers_subjects_dicatations")
}

model ClassRoom {
  id Int @id @default(autoincrement())
  name String
  code Int
  capacity Int
  projector Boolean?
  board Boolean?
  air_conditioning Boolean?
  heating Boolean?
  wifi Boolean?
  faculty_id Int
  subject_dictation SubjectDictation[]
  final_exams FinalExam[]
  faculty Faculty @relation(fields: [faculty_id], references: [id], onUpdate: Cascade, onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("class_rooms")
}